# Default image for jobs that don't require specific images
default:
  image: google/cloud-sdk:latest  # For jobs that need gcloud

stages:
  - build
  - test
  - sonarqube-check
  - sonarqube-vulnerability-report
  - deploy

variables:
  IMAGE_NAME: chatapp
  REPO_TAG: registry.gitlab.com/$CI_PROJECT_ROOT_NAMESPACE/$CI_PROJECT_NAME
  GCP_ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  GCP_TAG: us-central1-docker.pkg.dev/argocd-demo-432200/gitlab-repo
  RUNNER_TAG: chatapp
  APP_ENGINE_YAML: app.yaml
  APP_ENGINE_VERSION: chatapp
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

before_script:
  - if [ -x "$(command -v gcloud)" ]; then gcloud auth activate-service-account --key-file=/tmp/gcp-key.json; fi
  - if [ -x "$(command -v gcloud)" ]; then gcloud auth configure-docker $GCP_ARTIFACT_REGISTRY; fi

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

build-job:
  stage: build
  tags: [$RUNNER_TAG]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "The build is happening now!"
    - docker build -t ${REPO_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker push ${REPO_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker build -t ${GCP_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA} .
    - docker push ${GCP_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}

secret_detection:
  stage: test
  needs: ["build-job"]

semgrep-sast:
  stage: test
  needs: ["build-job"]

container_scanning:
  stage: test
  variables:
    GIT_STRATEGY: clone
    CS_IMAGE: ${REPO_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}
    CS_DOCKERFILE_PATH: ./Dockerfile
    SECURE_LOG_LEVEL: 'info'
  needs: ["build-job"]

sonarqube-check:
  stage: sonarqube-check
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sonar-scanner -Dsonar.projectKey=chat-app
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'


sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - sudo apt-get update && apt-get install -y wget  # Install wget if not available
    - |
      wget --http-user="${SONAR_TOKEN}" --output-document=gl-sast-sonar-report.json \
      "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=chat-app&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}"
  allow_failure: true
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json



publish-image:
  stage: deploy
  tags: [$RUNNER_TAG]
  script:
    - docker image tag ${REPO_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA} ${GCP_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker push ${GCP_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}
  needs: ["container_scanning", "secret_detection", "semgrep-sast", "sonarqube-vulnerability-report"]

deploy-job:
  stage: deploy
  tags: [$RUNNER_TAG]
  script:
    - echo "Deploying the code to the server!"
    - docker pull ${GCP_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}
    - docker run -d -p 5000:5000 ${GCP_TAG}/${IMAGE_NAME}:${CI_COMMIT_SHA}
  needs: ["publish-image"]

production:
  stage: deploy
  tags: [$RUNNER_TAG]
  script:
    - gcloud app deploy ${APP_ENGINE_YAML} --quiet --version ${APP_ENGINE_VERSION}
  needs: ["publish-image"]